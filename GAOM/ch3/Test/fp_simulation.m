function f = fp_simulation(type, width, height, name, nV, b, k)
%PURPOSE
%   Generate the simulated fringe pattern images based on the "type"
%
%INPUT 
%   type: 'circular' and 'peaks' 
%   width: width of the FP image
%   height: height of the FP image
%NOTE: currently require width = height 
%   nV: variance of the added Gaussian noise (default 1)
%   b: demodulation amplitude (default 1)
%   k: control of fringe density
%
%OUTPUT
%   f: simulated fringe pattern f
%
%REFERENCE 
%[1]Q. Kemao, H. Wang, and W. Gao, Windowed Fourier transform for fringe 
%   pattern analysis: theoretical analyses,Appl. Opt. 47, 5408-5419 (2008).
%
N = 0;  % image size
if(width == height)
    N = width;
end;

if nargin ==4
    nV = 1;
    b = 1;
    if strcmp(type, 'peaks')
        k = 5;
    elseif strcmp(type, 'circular')
        k = 0.005;
    else
        error('Invalid type');
    end
end

% Begin simulation
if strcmp(type, 'peaks')
    % phase is generated by peaks function
    phi = k * peaks(N);
    % the output image
    f = b * exp(1j * phi);
    % add noise
    f = f + sqrt(nV) * (randn(size(phi))+1j*randn(size(phi)));
elseif strcmp(type, 'circular')
    % Generate x,y distributions
    [y, x] = meshgrid(1:width, 1:height);
    % phi is generated as circle
    phi = 0.1 * k * ((x - width/2).^2 + (y-height/2).^2);
    % output f with noise added to the image
    f = b * exp(1j*phi) + sqrt(nV) * (randn(size(phi))+1j*randn(size(phi)));
else
    error('Invalid type');
end

rows = height;
cols = width;

% write the image to disk
filename = name; 
fileID = fopen(filename,'wt');
fprintf(fileID, '%d,%d\n', rows,cols);
for i=1:height
    for j=1:width
        fprintf(fileID, '%e,%e\n', real(f(i,j)),imag(f(i,j)));
    end
end
fclose(fileID);

